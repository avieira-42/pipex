!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFFER_SIZE	libs/libft/include/libft.h	26;"	d
FALSE	libs/libft/include/libft.h	24;"	d
LIBFT_H	libs/libft/include/libft.h	14;"	d
PIPEX_H	includes/pipex.h	14;"	d
TRUE	libs/libft/include/libft.h	23;"	d
args	practice.c	/^	char	**args;$/;"	m	struct:s_cmd	file:
c_array	libs/libft/include/libft.h	/^	char			*c_array;$/;"	m	struct:s_array
calculate_length	libs/libft/srcs/ft_itoa.c	/^static int	calculate_length(int n)$/;"	f	file:
content	libs/libft/include/libft.h	/^	void				*content;$/;"	m	struct:s_dblylst
content	libs/libft/include/libft.h	/^	void			*content;$/;"	m	struct:s_list
dirs	practice.c	/^	char	**dirs;$/;"	m	struct:s_cmd	file:
env	practice.c	/^	char	**env;$/;"	m	struct:s_cmd	file:
ft_atoi	libs/libft/srcs/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_atol	libs/libft/srcs/ft_atol.c	/^long int	ft_atol(char *nptr)$/;"	f
ft_bzero	libs/libft/srcs/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libs/libft/srcs/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_clear	libs/libft/srcs/ft_split.c	/^static char	**ft_clear(char **split, int i)$/;"	f	file:
ft_countwords	libs/libft/srcs/ft_split.c	/^static int	ft_countwords(char const *s, char c)$/;"	f	file:
ft_dblylst_addback	libs/libft/srcs/ft_dblylst_addback.c	/^void	ft_dblylst_addback(t_dblylst *dblylst, t_dblylst *new)$/;"	f
ft_dblylst_clear	libs/libft/srcs/ft_dblylst_clear.c	/^void	ft_dblylst_clear(t_dblylst *dblylst)$/;"	f
ft_dblylst_last	libs/libft/srcs/ft_dblylst_last.c	/^t_dblylst	*ft_dblylst_last(t_dblylst *dblylst)$/;"	f
ft_dblylst_new	libs/libft/srcs/ft_dblylst_new.c	/^t_dblylst	*ft_dblylst_new(void *content)$/;"	f
ft_dblylst_size	libs/libft/srcs/ft_dblylst_size.c	/^int	ft_dblylst_size(t_dblylst *dblylst)$/;"	f
ft_encrypt	libs/libft/srcs/ft_strmapi.c	/^char	ft_encrypt(unsigned int i, char c)$/;"	f
ft_found_newline	libs/libft/srcs/get_next_line_utils.c	/^int	ft_found_newline(char *line)$/;"	f
ft_free_matrix	libs/libft/srcs/ft_free_matrix.c	/^void	ft_free_matrix(char **matrix)$/;"	f
ft_is_int	libs/libft/srcs/ft_is_int.c	/^int	ft_is_int(char **array)$/;"	f
ft_isalnum	libs/libft/srcs/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libs/libft/srcs/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libs/libft/srcs/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libs/libft/srcs/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libs/libft/srcs/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_issign	libs/libft/srcs/ft_issign.c	/^int	ft_issign(char c)$/;"	f
ft_isspace	libs/libft/srcs/ft_isspace.c	/^int	ft_isspace(char c)$/;"	f
ft_itoa	libs/libft/srcs/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libs/libft/srcs/ft_lstadd_back_bonus.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libs/libft/srcs/ft_lstadd_front_bonus.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libs/libft/srcs/ft_lstclear_bonus.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	libs/libft/srcs/ft_lstdelone_bonus.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libs/libft/srcs/ft_lstiter_bonus.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libs/libft/srcs/ft_lstlast_bonus.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libs/libft/srcs/ft_lstmap_bonus.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libs/libft/srcs/ft_lstnew_bonus.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libs/libft/srcs/ft_lstsize_bonus.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memchr	libs/libft/srcs/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libs/libft/srcs/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libs/libft/srcs/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	libs/libft/srcs/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	libs/libft/srcs/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_nlen	libs/libft/srcs/get_next_line_utils.c	/^int	ft_nlen(char *str)$/;"	f
ft_populate	libs/libft/srcs/ft_split.c	/^static char	**ft_populate(char **split, char const *s, char sep, int words)$/;"	f	file:
ft_printadd	libs/libft/srcs/ft_printadd.c	/^int	ft_printadd(void *ptr)$/;"	f
ft_printarg	libs/libft/srcs/ft_printf.c	/^int	ft_printarg(char f, va_list var)$/;"	f
ft_printchar	libs/libft/srcs/ft_printchar.c	/^int	ft_printchar(char c)$/;"	f
ft_printf	libs/libft/srcs/ft_printf.c	/^int	ft_printf(const char *format, ...)$/;"	f
ft_printhex	libs/libft/srcs/ft_printhex.c	/^int	ft_printhex(unsigned long nbr, char c)$/;"	f
ft_printnbr	libs/libft/srcs/ft_printnbr.c	/^int	ft_printnbr(int nbr)$/;"	f
ft_printstr	libs/libft/srcs/ft_printstr.c	/^int	ft_printstr(char *str)$/;"	f
ft_printunsign_nbr	libs/libft/srcs/ft_printunsign_nbr.c	/^int	ft_printunsign_nbr(unsigned int nbr)$/;"	f
ft_putchar_fd	libs/libft/srcs/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libs/libft/srcs/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libs/libft/srcs/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libs/libft/srcs/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_readline	libs/libft/srcs/get_next_line.c	/^char	*ft_readline(int fd, char *buf, char *line)$/;"	f
ft_removeline	libs/libft/srcs/get_next_line.c	/^void	ft_removeline(char *buf)$/;"	f
ft_split	libs/libft/srcs/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	libs/libft/srcs/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcmp	libs/libft/srcs/ft_strcmp.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libs/libft/srcs/ft_strdup.c	/^static char	*ft_strcpy(char *s1, char *s2)$/;"	f	file:
ft_strdup	libs/libft/srcs/ft_strdup.c	/^char	*ft_strdup(const char *src)$/;"	f
ft_striteri	libs/libft/srcs/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	libs/libft/srcs/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libs/libft/srcs/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	libs/libft/srcs/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libs/libft/srcs/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	libs/libft/srcs/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libs/libft/srcs/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libs/libft/srcs/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f
ft_strrchr	libs/libft/srcs/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libs/libft/srcs/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libs/libft/srcs/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libs/libft/srcs/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libs/libft/srcs/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_writeline	libs/libft/srcs/get_next_line.c	/^char	*ft_writeline(char *line, char *buf)$/;"	f
get_next_line	libs/libft/srcs/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f
get_path_env	practice.c	/^char	*get_path_env(char **envp)$/;"	f
get_path	practice.c	/^char *get_path(char **dirs, char *cmd)$/;"	f
get_pid	practice.c	/^void	get_pid(int *fd, , t_cmd *cmd)$/;"	f
i_array	libs/libft/include/libft.h	/^	int				*i_array;$/;"	m	struct:s_array
i_merge_sort	libs/libft/srcs/i_merge_sort.c	/^void	i_merge_sort(t_array middle)$/;"	f
i_merge	libs/libft/srcs/i_merge_sort.c	/^void	i_merge(t_array left, t_array middle, t_array right)$/;"	f
i	practice.c	/^	int		i;$/;"	m	struct:s_cmd	file:
j	practice.c	/^	int		j;$/;"	m	struct:s_cmd	file:
join_command	practice.c	/^char *join_command(char *dir, char *cmd)$/;"	f
length	libs/libft/include/libft.h	/^	int				length;$/;"	m	struct:s_array
main	piping.c	/^int main(int argc, char **argv, char **envp)$/;"	f
main	practice.c	/^int main(int argc, char **argv, char **env)$/;"	f
moves	libs/libft/include/libft.h	/^	int					moves;$/;"	m	struct:s_dblylst
next	libs/libft/include/libft.h	/^	struct s_dblylst	*next;$/;"	m	struct:s_dblylst	typeref:struct:s_dblylst::s_dblylst
next	libs/libft/include/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
path	practice.c	/^	char	*path;$/;"	m	struct:s_cmd	file:
pid	practice.c	/^	pid_t	pid;$/;"	m	struct:s_cmd	file:
pipex_init	practice.c	/^int	pipex_init(t_cmd *cmd1, t_cmd *cmd2, char **argv, char **env)$/;"	f
populate_array	libs/libft/srcs/ft_itoa.c	/^static char	*populate_array(char *array, int i, int n)$/;"	f	file:
pos	libs/libft/include/libft.h	/^	int					pos;$/;"	m	struct:s_dblylst
prev	libs/libft/include/libft.h	/^	struct s_dblylst	*prev;$/;"	m	struct:s_dblylst	typeref:struct:s_dblylst::s_dblylst
s_array	libs/libft/include/libft.h	/^typedef struct s_array$/;"	s
s_cmd	practice.c	/^typedef struct s_cmd$/;"	s	file:
s_dblylst	libs/libft/include/libft.h	/^typedef struct s_dblylst$/;"	s
s_list	libs/libft/include/libft.h	/^typedef struct s_list$/;"	s
t_array	libs/libft/include/libft.h	/^}	t_array;$/;"	t	typeref:struct:s_array
t_bool	libs/libft/include/libft.h	/^typedef int	t_bool;$/;"	t
t_cmd	practice.c	/^}	t_cmd;$/;"	t	typeref:struct:s_cmd	file:
t_dblylst	libs/libft/include/libft.h	/^}	t_dblylst;$/;"	t	typeref:struct:s_dblylst
t_list	libs/libft/include/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
target_pos	libs/libft/include/libft.h	/^	int					target_pos;$/;"	m	struct:s_dblylst
target	libs/libft/include/libft.h	/^	struct s_dblylst	*target;$/;"	m	struct:s_dblylst	typeref:struct:s_dblylst::s_dblylst
